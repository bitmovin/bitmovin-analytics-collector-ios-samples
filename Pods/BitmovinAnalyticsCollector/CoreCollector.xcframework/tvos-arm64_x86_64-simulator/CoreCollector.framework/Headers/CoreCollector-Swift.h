#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef CORECOLLECTOR_SWIFT_H
#define CORECOLLECTOR_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CoreCollector",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS_NAMED("AnalyticsConfig")
@interface BMAAnalyticsConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull backendUrl;
@property (nonatomic, readonly) BOOL longTermRetryEnabled;
@property (nonatomic, readonly) BOOL randomizedUserId;
@property (nonatomic, readonly) BOOL adTrackingDisabled;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey backendUrl:(NSString * _Nonnull)backendUrl retrySendingData:(BOOL)retrySendingData randomizedUserId:(BOOL)randomizedUserId adTrackingDisabled:(BOOL)adTrackingDisabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13CoreCollector23BitmovinAnalyticsConfig") SWIFT_DEPRECATED_MSG("Use AnalyticsConfig instead")
@interface BitmovinAnalyticsConfig : NSObject
/// CDN Provide that the video playback session is using
@property (nonatomic, copy) NSString * _Nullable cdnProvider;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData1;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData2;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData3;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData4;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData5;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData6;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData7;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData8;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData9;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData10;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData11;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData12;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData13;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData14;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData15;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData16;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData17;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData18;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData19;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData20;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData21;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData22;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData23;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData24;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData25;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData26;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData27;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData28;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData29;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData30;
/// User ID of the customer
@property (nonatomic, copy) NSString * _Nullable customerUserId;
/// Experiment name needed for A/B testing
@property (nonatomic, copy) NSString * _Nullable experimentName;
/// ID of the video in the CMS system
@property (nonatomic, copy) NSString * _Nullable videoId;
/// Human readable title of the video asset currently playing
@property (nonatomic, copy) NSString * _Nullable title;
/// Analytics key. Find this value on dashboard.bitmovin.com/analytics
@property (nonatomic, copy) NSString * _Nonnull key;
/// Player key. Find this value on dashboard.bitmovin.com/analytics
@property (nonatomic, copy) NSString * _Nonnull playerKey;
/// Breadcrumb path to show where in the app the user is
@property (nonatomic, copy) NSString * _Nullable path;
/// Flag to see if stream is live before stream metadata is available (default: false)
@property (nonatomic) BOOL isLive;
/// Flag to enable Ad tracking
@property (nonatomic) BOOL ads;
/// How often the video engine should heartbeat
@property (nonatomic) NSInteger heartbeatInterval SWIFT_DEPRECATED_MSG("No longer possible to change default value of 59700ms");
/// Flag to use randomised userId not depending on device specific values
@property (nonatomic) BOOL randomizeUserId;
/// When set to <code>true</code>, analytics events that have failed to be sent are cached in a persistent way. Cached elements
/// from within 14 days are retried at a later point in time, once a network connection is established again. There
/// will be at most 5,000 elements cached in total and at most 500 elements per playback session.
/// Disabling this config flag does not disable the retrying of already cached elements.
@property (nonatomic) BOOL longTermRetryEnabled;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key playerKey:(NSString * _Nonnull)playerKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13CoreCollector17CorePlayerAdapter")
@interface CorePlayerAdapter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("CustomData")
@interface BMACustomData : NSObject
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData1;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData2;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData3;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData4;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData5;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData6;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData7;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData8;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData9;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData10;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData11;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData12;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData13;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData14;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData15;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData16;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData17;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData18;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData19;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData20;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData21;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData22;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData23;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData24;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData25;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData26;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData27;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData28;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData29;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData30;
/// Optional free-form label
@property (nonatomic, readonly, copy) NSString * _Nullable experimentName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMACustomData (SWIFT_EXTENSION(CoreCollector))
@end


SWIFT_CLASS_NAMED("Builder")
@interface BMACustomDataBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initFrom:(BMACustomData * _Nonnull)customData;
- (BMACustomData * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)withExperimentName:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData1:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData2:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData3:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData4:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData5:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData6:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData7:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData8:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData9:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData10:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData11:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData12:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData13:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData14:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData15:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData16:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData17:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData18:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData19:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData20:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData21:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData22:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData23:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData24:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData25:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData26:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData27:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData28:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData29:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData30:(NSString * _Nullable)value;
@end



@interface BMACustomData (SWIFT_EXTENSION(CoreCollector))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("DefaultMetadata")
@interface BMADefaultMetadata : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable cdnProvider;
@property (nonatomic, readonly, copy) NSString * _Nullable customUserId;
@property (nonatomic, readonly, strong) BMACustomData * _Nonnull customData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BMADefaultMetadata (SWIFT_EXTENSION(CoreCollector))
@end


SWIFT_CLASS_NAMED("Builder")
@interface BMADefaultMetadataBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initFrom:(BMADefaultMetadata * _Nonnull)from;
- (BMADefaultMetadata * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)withCdnProvider:(NSString * _Nonnull)value;
- (nonnull instancetype)withCustomUserId:(NSString * _Nonnull)value;
- (nonnull instancetype)withCustomData:(BMACustomData * _Nonnull)value;
@end



SWIFT_CLASS_NAMED("SourceMetadata")
@interface BMASourceMetadata : NSObject
/// ID of the video in the CMS system
@property (nonatomic, readonly, copy) NSString * _Nullable videoId;
/// Human readable title of the video asset currently playing
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Breadcrumb path to show where in the app the user is
@property (nonatomic, readonly, copy) NSString * _Nullable path;
/// CDN Provide that the video playback session is using
@property (nonatomic, readonly, copy) NSString * _Nullable cdnProvider;
@property (nonatomic, readonly, strong) BMACustomData * _Nonnull customData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMASourceMetadata (SWIFT_EXTENSION(CoreCollector))
@end


SWIFT_CLASS_NAMED("Builder")
@interface BMASourceMetadataBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initFrom:(BMASourceMetadata * _Nonnull)from;
- (BMASourceMetadata * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)withVideoId:(NSString * _Nonnull)value;
- (nonnull instancetype)withTitle:(NSString * _Nonnull)value;
- (nonnull instancetype)withPath:(NSString * _Nonnull)value;
- (nonnull instancetype)withIsLive:(BOOL)value;
- (nonnull instancetype)withCdnProvider:(NSString * _Nonnull)value;
- (nonnull instancetype)withCustomData:(BMACustomData * _Nonnull)value;
@end



SWIFT_PROTOCOL("_TtP13CoreCollector10_Collector_")
@protocol _Collector
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nullable impressionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, strong) BMADefaultMetadata * _Nonnull defaultMetadata;
@property (nonatomic, readonly, strong) BMACustomData * _Nonnull customData;
@property (nonatomic, readonly, strong) BMASourceMetadata * _Nullable sourceMetadataForCurrentSource;
- (void)detach;
- (void)sendCustomDataEventWith:(BMACustomData * _Nonnull)customData;
- (void)applyWithDefaultMetadata:(BMADefaultMetadata * _Nonnull)defaultMetadata;
- (void)applyWithCustomData:(BMACustomData * _Nonnull)customData;
- (void)applySourceMetadataForCurrentSource:(BMASourceMetadata * _Nonnull)sourceMetadata;
- (void)applyCustomDataForCurrentSource:(BMACustomData * _Nonnull)customData;
- (NSString * _Nonnull)getUserId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "userId");
- (BMACustomData * _Nonnull)getCustomData SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "customData");
- (void)setCustomDataWithCustomData:(BMACustomData * _Nonnull)customData SWIFT_DEPRECATED_MSG("", "applyWithCustomData:");
- (void)setCustomDataOnceWithCustomData:(BMACustomData * _Nonnull)customData SWIFT_DEPRECATED_MSG("", "sendCustomDataEventWith:");
- (void)detachPlayer SWIFT_DEPRECATED_MSG("", "detach");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef CORECOLLECTOR_SWIFT_H
#define CORECOLLECTOR_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CoreCollector",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS_NAMED("AnalyticsConfig")
@interface BMAAnalyticsConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull backendUrl;
@property (nonatomic, readonly) BOOL longTermRetryEnabled;
@property (nonatomic, readonly) BOOL randomizedUserId;
@property (nonatomic, readonly) BOOL adTrackingDisabled;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey backendUrl:(NSString * _Nonnull)backendUrl retrySendingData:(BOOL)retrySendingData randomizedUserId:(BOOL)randomizedUserId adTrackingDisabled:(BOOL)adTrackingDisabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13CoreCollector23BitmovinAnalyticsConfig") SWIFT_DEPRECATED_MSG("Use AnalyticsConfig instead")
@interface BitmovinAnalyticsConfig : NSObject
/// CDN Provide that the video playback session is using
@property (nonatomic, copy) NSString * _Nullable cdnProvider;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData1;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData2;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData3;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData4;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData5;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData6;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData7;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData8;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData9;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData10;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData11;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData12;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData13;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData14;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData15;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData16;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData17;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData18;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData19;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData20;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData21;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData22;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData23;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData24;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData25;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData26;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData27;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData28;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData29;
/// Optional free-form custom data
@property (nonatomic, copy) NSString * _Nullable customData30;
/// User ID of the customer
@property (nonatomic, copy) NSString * _Nullable customerUserId;
/// Experiment name needed for A/B testing
@property (nonatomic, copy) NSString * _Nullable experimentName;
/// ID of the video in the CMS system
@property (nonatomic, copy) NSString * _Nullable videoId;
/// Human readable title of the video asset currently playing
@property (nonatomic, copy) NSString * _Nullable title;
/// Analytics key. Find this value on dashboard.bitmovin.com/analytics
@property (nonatomic, copy) NSString * _Nonnull key;
/// Player key. Find this value on dashboard.bitmovin.com/analytics
@property (nonatomic, copy) NSString * _Nonnull playerKey;
/// Breadcrumb path to show where in the app the user is
@property (nonatomic, copy) NSString * _Nullable path;
/// Flag to see if stream is live before stream metadata is available (default: false)
@property (nonatomic) BOOL isLive;
/// Flag to enable Ad tracking
@property (nonatomic) BOOL ads;
/// How often the video engine should heartbeat
@property (nonatomic) NSInteger heartbeatInterval SWIFT_DEPRECATED_MSG("No longer possible to change default value of 59700ms");
/// Flag to use randomised userId not depending on device specific values
@property (nonatomic) BOOL randomizeUserId;
/// When set to <code>true</code>, analytics events that have failed to be sent are cached in a persistent way. Cached elements
/// from within 14 days are retried at a later point in time, once a network connection is established again. There
/// will be at most 5,000 elements cached in total and at most 500 elements per playback session.
/// Disabling this config flag does not disable the retrying of already cached elements.
@property (nonatomic) BOOL longTermRetryEnabled;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key playerKey:(NSString * _Nonnull)playerKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13CoreCollector17CorePlayerAdapter")
@interface CorePlayerAdapter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("CustomData")
@interface BMACustomData : NSObject
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData1;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData2;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData3;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData4;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData5;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData6;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData7;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData8;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData9;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData10;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData11;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData12;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData13;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData14;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData15;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData16;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData17;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData18;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData19;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData20;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData21;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData22;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData23;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData24;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData25;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData26;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData27;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData28;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData29;
/// Optional free-form custom data
@property (nonatomic, readonly, copy) NSString * _Nullable customData30;
/// Optional free-form label
@property (nonatomic, readonly, copy) NSString * _Nullable experimentName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMACustomData (SWIFT_EXTENSION(CoreCollector))
@end


SWIFT_CLASS_NAMED("Builder")
@interface BMACustomDataBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initFrom:(BMACustomData * _Nonnull)customData;
- (BMACustomData * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)withExperimentName:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData1:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData2:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData3:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData4:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData5:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData6:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData7:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData8:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData9:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData10:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData11:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData12:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData13:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData14:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData15:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData16:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData17:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData18:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData19:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData20:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData21:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData22:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData23:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData24:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData25:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData26:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData27:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData28:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData29:(NSString * _Nullable)value;
- (nonnull instancetype)withCustomData30:(NSString * _Nullable)value;
@end



@interface BMACustomData (SWIFT_EXTENSION(CoreCollector))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("DefaultMetadata")
@interface BMADefaultMetadata : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable cdnProvider;
@property (nonatomic, readonly, copy) NSString * _Nullable customUserId;
@property (nonatomic, readonly, strong) BMACustomData * _Nonnull customData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BMADefaultMetadata (SWIFT_EXTENSION(CoreCollector))
@end


SWIFT_CLASS_NAMED("Builder")
@interface BMADefaultMetadataBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initFrom:(BMADefaultMetadata * _Nonnull)from;
- (BMADefaultMetadata * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)withCdnProvider:(NSString * _Nonnull)value;
- (nonnull instancetype)withCustomUserId:(NSString * _Nonnull)value;
- (nonnull instancetype)withCustomData:(BMACustomData * _Nonnull)value;
@end



SWIFT_CLASS_NAMED("SourceMetadata")
@interface BMASourceMetadata : NSObject
/// ID of the video in the CMS system
@property (nonatomic, readonly, copy) NSString * _Nullable videoId;
/// Human readable title of the video asset currently playing
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Breadcrumb path to show where in the app the user is
@property (nonatomic, readonly, copy) NSString * _Nullable path;
/// CDN Provide that the video playback session is using
@property (nonatomic, readonly, copy) NSString * _Nullable cdnProvider;
@property (nonatomic, readonly, strong) BMACustomData * _Nonnull customData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMASourceMetadata (SWIFT_EXTENSION(CoreCollector))
@end


SWIFT_CLASS_NAMED("Builder")
@interface BMASourceMetadataBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initFrom:(BMASourceMetadata * _Nonnull)from;
- (BMASourceMetadata * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)withVideoId:(NSString * _Nonnull)value;
- (nonnull instancetype)withTitle:(NSString * _Nonnull)value;
- (nonnull instancetype)withPath:(NSString * _Nonnull)value;
- (nonnull instancetype)withIsLive:(BOOL)value;
- (nonnull instancetype)withCdnProvider:(NSString * _Nonnull)value;
- (nonnull instancetype)withCustomData:(BMACustomData * _Nonnull)value;
@end



SWIFT_PROTOCOL("_TtP13CoreCollector10_Collector_")
@protocol _Collector
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSString * _Nullable impressionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, strong) BMADefaultMetadata * _Nonnull defaultMetadata;
@property (nonatomic, readonly, strong) BMACustomData * _Nonnull customData;
@property (nonatomic, readonly, strong) BMASourceMetadata * _Nullable sourceMetadataForCurrentSource;
- (void)detach;
- (void)sendCustomDataEventWith:(BMACustomData * _Nonnull)customData;
- (void)applyWithDefaultMetadata:(BMADefaultMetadata * _Nonnull)defaultMetadata;
- (void)applyWithCustomData:(BMACustomData * _Nonnull)customData;
- (void)applySourceMetadataForCurrentSource:(BMASourceMetadata * _Nonnull)sourceMetadata;
- (void)applyCustomDataForCurrentSource:(BMACustomData * _Nonnull)customData;
- (NSString * _Nonnull)getUserId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "userId");
- (BMACustomData * _Nonnull)getCustomData SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "customData");
- (void)setCustomDataWithCustomData:(BMACustomData * _Nonnull)customData SWIFT_DEPRECATED_MSG("", "applyWithCustomData:");
- (void)setCustomDataOnceWithCustomData:(BMACustomData * _Nonnull)customData SWIFT_DEPRECATED_MSG("", "sendCustomDataEventWith:");
- (void)detachPlayer SWIFT_DEPRECATED_MSG("", "detach");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
